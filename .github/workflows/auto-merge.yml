name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request?.number || context.payload.check_suite?.pull_requests[0]?.number
            });

            console.log('PR Title:', pr.title);
            console.log('PR Body:', pr.body);

            // Check if this is a patch or minor update (not major)
            const isMajorUpdate = pr.title.match(/bump .* from .* to .*\d+\.\d+\.\d+/) &&
                                 pr.body && pr.body.includes('‚ö†Ô∏è') && pr.body.includes('BREAKING');

            const isMinorOrPatch = !isMajorUpdate;

            core.setOutput('is-auto-mergeable', isMinorOrPatch);
            core.setOutput('pr-number', pr.number);
            core.setOutput('pr-title', pr.title);

      - name: Wait for CI checks
        if: steps.pr-details.outputs.is-auto-mergeable == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-details.outputs.pr-number }};

            // Wait for all required checks to complete
            const maxAttempts = 30;
            const delayMs = 30000; // 30 seconds

            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`Attempt ${attempt}/${maxAttempts}: Checking CI status...`);

              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              // Get the latest commit SHA
              const commitSha = pr.head.sha;

              // Get all check runs for this commit
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: commitSha
              });

              // Get all status checks for this commit
              const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: commitSha
              });

              console.log(`Found ${checkRuns.check_runs.length} check runs and ${statuses.length} statuses`);

              // Check if all checks are completed and successful
              const allChecksPassed = checkRuns.check_runs.every(check =>
                check.status === 'completed' && check.conclusion === 'success'
              );

              const allStatusesPassed = statuses.length === 0 || statuses.every(status =>
                status.state === 'success'
              );

              const hasFailedChecks = checkRuns.check_runs.some(check =>
                check.status === 'completed' && ['failure', 'cancelled', 'timed_out'].includes(check.conclusion)
              );

              const hasFailedStatuses = statuses.some(status =>
                ['failure', 'error'].includes(status.state)
              );

              if (hasFailedChecks || hasFailedStatuses) {
                console.log('‚ùå Some checks failed. Will not auto-merge.');
                core.setFailed('CI checks failed');
                return;
              }

              if (allChecksPassed && allStatusesPassed && checkRuns.check_runs.length > 0) {
                console.log('‚úÖ All CI checks passed!');
                return;
              }

              if (attempt < maxAttempts) {
                console.log(`‚è≥ Waiting ${delayMs/1000} seconds for checks to complete...`);
                await new Promise(resolve => setTimeout(resolve, delayMs));
              }
            }

            console.log('‚è∞ Timeout waiting for CI checks to complete');
            core.setFailed('Timeout waiting for CI checks');

      - name: Auto-approve PR
        if: steps.pr-details.outputs.is-auto-mergeable == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-details.outputs.pr-number }};

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: 'APPROVE',
              body: 'ü§ñ Auto-approved by GitHub Actions - all CI checks passed for this dependency update.'
            });

      - name: Enable auto-merge
        if: steps.pr-details.outputs.is-auto-mergeable == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-details.outputs.pr-number }};

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash',
              commit_title: `${{ steps.pr-details.outputs.pr-title }}`,
              commit_message: 'Auto-merged by GitHub Actions after all CI checks passed.'
            });

            console.log('‚úÖ Successfully auto-merged Dependabot PR');

      - name: Comment on skipped major updates
        if: steps.pr-details.outputs.is-auto-mergeable == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-details.outputs.pr-number }};

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: 'üö® **Major version update detected** - This PR was not auto-merged as it contains breaking changes. Please review manually before merging.'
            });
