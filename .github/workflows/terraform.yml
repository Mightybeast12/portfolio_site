name: Terraform Infrastructure & Application Deployment

on:
  push:
    branches: [main, test-deploy]
    paths:
      - "terraform/**"
      - "Cargo.toml"
      - "src/**"
      - "static/**"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
      - "Cargo.toml"
      - "src/**"
      - "static/**"
  workflow_dispatch:
  workflow_run:
    workflows: ["Lint and Check", "Security and Dependencies"]
    types:
      - completed

env:
  TF_VERSION: "1.5.0"
  TF_WORKING_DIR: "./terraform"
  CARGO_TERM_COLOR: always

jobs:
  infrastructure:
    name: "Infrastructure Planning"
    runs-on: ubuntu-latest
    # Only run if triggered by workflow_run and the prerequisite workflows succeeded
    if: |
      github.event_name != 'workflow_run' ||
      github.event.workflow_run.conclusion == 'success'

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    outputs:
      terraform-changed: ${{ steps.terraform-changes.outputs.changed }}
      app-changed: ${{ steps.app-changes.outputs.changed }}
      version-changed: ${{ steps.version-check.outputs.changed }}
      deploy-version: ${{ steps.version-check.outputs.version }}

    steps:
      - name: Check Prerequisite Workflows
        if: github.event_name == 'workflow_run'
        run: |
          echo "üîç Triggered by workflow: ${{ github.event.workflow_run.name }}"
          echo "üìä Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "‚ùå Prerequisite workflow failed. Deployment blocked."
            exit 1
          else
            echo "‚úÖ Prerequisite workflow succeeded. Proceeding with deployment."
          fi

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Debug Git State
        run: |
          echo "üîç DEBUG: Git state information"
          echo "Current HEAD: $(git rev-parse HEAD)"
          echo "Previous commit: $(git rev-parse HEAD~1 2>/dev/null || echo 'N/A')"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Changed files:"
          git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "Cannot compare with previous commit"

      - name: Check Terraform Changes
        id: terraform-changes
        run: |
          echo "üîç Checking terraform changes..."
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          echo "All changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "^terraform/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üèóÔ∏è Terraform infrastructure changes detected"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "üìã No Terraform changes detected"
          fi

      - name: Check Application Changes
        id: app-changes
        run: |
          cd ..
          echo "üîç Checking application changes..."
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          echo "All changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -E "^(src/|static/|Cargo\.(toml|lock)|Dockerfile)"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üì¶ Application changes detected"
            echo "Matching files:"
            echo "$CHANGED_FILES" | grep -E "^(src/|static/|Cargo\.(toml|lock)|Dockerfile)" || true
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "üìã No application changes detected"
          fi

      - name: Check Version Change
        id: version-check
        run: |
          cd ..
          echo "üîç Checking version changes..."
          # Get current version
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Check if this is the first commit or if we can compare with previous
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            # Get previous version from the last commit
            PREVIOUS_VERSION=$(git show HEAD~1:Cargo.toml | grep '^version = ' | head -1 | cut -d'"' -f2 || echo "")
            echo "Previous version: $PREVIOUS_VERSION"

            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$PREVIOUS_VERSION" ]; then
              echo "‚úÖ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "‚è≠Ô∏è Version unchanged ($CURRENT_VERSION)"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "üöÄ First commit or no previous version found"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          terraform plan -no-color -input=false -var="ci_environment=true" -var="auto_build=false" -out=tfplan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            **Change Detection:**
            - üèóÔ∏è Infrastructure: ${{ steps.terraform-changes.outputs.changed }}
            - üì¶ Application: ${{ steps.app-changes.outputs.changed }}
            - üè∑Ô∏è Version: ${{ steps.version-check.outputs.changed }} (${{ steps.version-check.outputs.version }})

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  build-deploy:
    name: "Build & Deploy Application"
    runs-on: ubuntu-latest
    needs: infrastructure
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch') &&
      (needs.infrastructure.outputs.terraform-changed == 'true' ||
       needs.infrastructure.outputs.app-changed == 'true' ||
       needs.infrastructure.outputs.version-changed == 'true' ||
       github.event_name == 'workflow_dispatch')

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

      - name: Terraform Init
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: terraform init

      - name: Calculate Image Tag
        id: image-tag
        run: |
          cd ..
          # Generate version tag from Cargo.toml (safe for Cloud Run)
          CARGO_VERSION=$(grep '^version' Cargo.toml | cut -d'"' -f2 | tr '.' '-')
          GIT_COMMIT=$(git rev-parse --short HEAD)
          IMAGE_TAG="v${CARGO_VERSION}-${GIT_COMMIT}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Generated image tag: $IMAGE_TAG"

      - name: Build and Push Container
        if: needs.infrastructure.outputs.app-changed == 'true' || needs.infrastructure.outputs.version-changed == 'true'
        env:
          IMAGE_TAG: ${{ steps.image-tag.outputs.image_tag }}
        run: |
          echo "üì¶ Building and pushing container with tag: ${{ steps.image-tag.outputs.image_tag }}"
          cd ..
          ./scripts/build-and-deploy.sh

      - name: Deploy Infrastructure & Application
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üöÄ Deploying infrastructure and application with image tag: ${{ steps.image-tag.outputs.image_tag }}"
          terraform apply -auto-approve \
            -var="ci_environment=true" \
            -var="auto_build=false" \
            -var="image_tag=${{ steps.image-tag.outputs.image_tag }}"

      - name: Capture Terraform Outputs
        id: outputs
        run: |
          echo "cloud_run_url=$(terraform output -raw cloud_run_service_url)" >> $GITHUB_OUTPUT
          echo "custom_domain_url=$(terraform output -raw custom_domain_url)" >> $GITHUB_OUTPUT
          echo "subdomain_url=$(terraform output -raw subdomain_url)" >> $GITHUB_OUTPUT
          echo "docker_image_url=$(terraform output -raw docker_image_url)" >> $GITHUB_OUTPUT
          echo "artifact_registry=$(terraform output -raw artifact_registry_repository)" >> $GITHUB_OUTPUT

      - name: Display Deployment Summary
        run: |
          echo "## üöÄ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.infrastructure.outputs.deploy-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Changed**: ${{ needs.infrastructure.outputs.terraform-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Application Changed**: ${{ needs.infrastructure.outputs.app-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Changed**: ${{ needs.infrastructure.outputs.version-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Application URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **üîó Custom Domain**: [${{ steps.outputs.outputs.custom_domain_url }}](${{ steps.outputs.outputs.custom_domain_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **üè∑Ô∏è Subdomain**: [${{ steps.outputs.outputs.subdomain_url }}](${{ steps.outputs.outputs.subdomain_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **‚òÅÔ∏è Cloud Run Direct**: [${{ steps.outputs.outputs.cloud_run_url }}](${{ steps.outputs.outputs.cloud_run_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Container Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ steps.outputs.outputs.docker_image_url }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ steps.outputs.outputs.artifact_registry }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß DNS Configuration" >> $GITHUB_STEP_SUMMARY
          terraform output -json dns_configuration | jq -r '.instructions' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã All Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          terraform output -json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  skip-deployment:
    name: "Deployment Skipped"
    runs-on: ubuntu-latest
    needs: infrastructure
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || github.event_name == 'workflow_run') &&
      needs.infrastructure.outputs.terraform-changed == 'false' &&
      needs.infrastructure.outputs.app-changed == 'false' &&
      needs.infrastructure.outputs.version-changed == 'false'

    steps:
      - name: Skip Deployment Summary
        run: |
          echo "## ‚è≠Ô∏è Deployment Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason**: No changes detected that require deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Change Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "- **üèóÔ∏è Infrastructure Changes**: ${{ needs.infrastructure.outputs.terraform-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **üì¶ Application Changes**: ${{ needs.infrastructure.outputs.app-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **üè∑Ô∏è Version Changes**: ${{ needs.infrastructure.outputs.version-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **üìã Current Version**: ${{ needs.infrastructure.outputs.deploy-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üí° **To trigger deployment**: Update version in Cargo.toml, modify application code, or change infrastructure"
