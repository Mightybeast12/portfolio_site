name: CI and Quality Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Sundays at 2 AM UTC for security checks
    - cron: "0 2 * * 0"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-and-fix:
    name: Lint and Auto-fix
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
      checks: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Use GITHUB_TOKEN with enhanced permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Clippy with auto-fix
        run: |
          # Run clippy with auto-fix for automatically fixable issues
          cargo clippy --all-targets --all-features --fix --allow-dirty --allow-staged

          # Run clippy again to check for remaining issues
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Check compilation
        run: cargo check --all-targets --all-features

      - name: Run tests
        run: cargo test --all-features

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Files have been modified by clippy --fix"
            git status --porcelain
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No files were modified"
          fi

      - name: Bump patch version
        if: steps.verify-changed-files.outputs.changed == 'true'
        id: bump-version
        run: |
          # Get current version
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          # Split version into parts (major.minor.patch)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update Cargo.toml
          sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" Cargo.toml

          # Verify the change
          echo "Updated Cargo.toml:"
          grep '^version = ' Cargo.toml | head -1

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add all changes
          git add .

          # Commit changes
          git commit -m "Auto-fix clippy warnings and bump version to ${{ steps.bump-version.outputs.new_version }}"

          # Push changes with error handling
          if ! git push; then
            echo "❌ Failed to push changes. This might be due to:"
            echo "1. Branch protection rules preventing direct pushes"
            echo "2. Insufficient GITHUB_TOKEN permissions"
            echo "3. Repository settings requiring pull requests"
            echo ""
            echo "💡 Consider:"
            echo "- Enabling 'Allow GitHub Actions to create and approve pull requests' in repository settings"
            echo "- Updating branch protection rules to allow GitHub Actions to push"
            echo "- Using a Personal Access Token instead of GITHUB_TOKEN if needed"
            exit 1
          else
            echo "✅ Successfully pushed auto-fix changes and version bump"
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint-and-fix

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Ensure we get the latest changes if version was bumped
          ref: ${{ github.head_ref || github.ref }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: lint-and-fix

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Ensure we get the latest changes if version was bumped
          ref: ${{ github.head_ref || github.ref }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-outdated-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-outdated-

      - name: Install cargo-outdated
        run: cargo install cargo-outdated

      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1
        continue-on-error: true

      - name: Generate dependency report
        run: |
          echo "## Dependency Report" >> $GITHUB_STEP_SUMMARY
          echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cargo outdated || echo "No outdated dependencies found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    needs: lint-and-fix

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Ensure we get the latest changes if version was bumped
          ref: ${{ github.head_ref || github.ref }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-license-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-license-

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          echo "## License Report" >> $GITHUB_STEP_SUMMARY
          echo "### Dependency Licenses" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cargo license >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, license-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Ensure we get the latest changes if version was bumped
          ref: ${{ github.head_ref || github.ref }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install trunk
        run: cargo install trunk

      - name: Install wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-wasm-

      - name: Build WASM
        run: trunk build --release
